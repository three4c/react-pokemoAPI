{"version":3,"sources":["components/PokemonResult.tsx","components/ErrorMessage.tsx","components/PokemonSearch.tsx","serviceWorker.ts","index.tsx"],"names":["PokemonResult","map","value","fromMin","fromMax","toMin","toMax","react_default","a","createElement","className","this","props","nameJp","src","concat","process","imageNumber","nameEn","alt","flavorText","id","type01","type02","style","width","hp","attack","defense","spAttack","spDefense","speed","Component","ErorrMessage","notFound","errorMessage","PokemonSearch","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","pokemonRef","onPokemonSearchButton","inputValue","current","checkPokemonCounter","_loop","i","Pokedex","name","japanese","slice","j","setState","Types","english","type","fetch","then","res","status","json","data","k","flavor_text_entries","language","flavor_text","error","base","Attack","Defense","HP","Speed","existence","length","onEnterKey","e","keyCode","state","React","createRef","ref","onKeyDown","placeholder","onClick","ErrorMessage_ErorrMessage","PokemonResult_PokemonResult","Boolean","window","location","hostname","match","ReactDOM","render","PokemonSearch_PokemonSearch","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6cca45f8.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport PokemonResultInterface from \"../interfaces/PokemonResult.interface\";\nimport \"../scss/PokemonResult.scss\";\n\nexport default class PokemonResult extends Component<PokemonResultInterface> {\n  private map = (\n    value: number,\n    fromMin: number,\n    fromMax: number,\n    toMin: number,\n    toMax: number\n  ): number => {\n    let result: number = 0;\n\n    result =\n      value <= fromMin\n        ? toMin\n        : value >= fromMax\n          ? toMax\n          : (() => {\n            let ratio: number = (toMax - toMin) / (fromMax - fromMin);\n            return (value - fromMin) * ratio + toMin;\n          })();\n\n    return result;\n  };\n\n  render() {\n    return (\n      <div className=\"PokemonResult\">\n        <div className=\"PokemonResult__name\">\n          <small>キミが けんさくした ポケモンは…</small>\n          <strong>{this.props.nameJp}</strong>\n          <span>だ！</span>\n        </div>\n        <div className=\"PokemonResult__info\">\n          <div className=\"PokemonResult__image\">\n            <img\n              src={`${process.env.PUBLIC_URL}/image/${this.props.imageNumber +\n                this.props.nameEn}.png`}\n              alt=\"検索したポケモンの画像\"\n            />\n          </div>\n          <div className=\"PokemonResult__flavorText\">\n            <p>{this.props.flavorText}</p>\n          </div>\n        </div>\n        <ul className=\"PokemonResult__numberType\">\n          <li className=\"PokemonResult__id\">\n            ぜんこくずかん No. {this.props.id}\n          </li>\n          <li className=\"PokemonResult__type\">{this.props.type01}</li>\n          {this.props.type02 && (\n            <li className=\"PokemonResult__type\">{this.props.type02}</li>\n          )}\n        </ul>\n        <div className=\"PokemonResult__status\">\n          <ul className=\"PokemonResult__list\">\n            <li className=\"PokemonResult__item\">\n              <span className=\"PokemonResult__statusName\">HP</span>\n              <div className=\"PokemonResult__barArea\">\n                <div\n                  className=\"PokemonResult__bar\"\n                  style={{\n                    width: this.map(this.props.hp, 0, 255, 0, 100) + \"%\"\n                  }}\n                />\n              </div>\n            </li>\n            <li className=\"PokemonResult__item\">\n              <span className=\"PokemonResult__statusName\">こうげき</span>\n              <div className=\"PokemonResult__barArea\">\n                <div\n                  className=\"PokemonResult__bar\"\n                  style={{\n                    width: this.map(this.props.attack, 0, 255, 0, 100) + \"%\"\n                  }}\n                />\n              </div>\n            </li>\n            <li className=\"PokemonResult__item\">\n              <span className=\"PokemonResult__statusName\">ぼうぎょ</span>\n              <div className=\"PokemonResult__barArea\">\n                <div\n                  className=\"PokemonResult__bar\"\n                  style={{\n                    width: this.map(this.props.defense, 0, 255, 0, 100) + \"%\"\n                  }}\n                />\n              </div>\n            </li>\n          </ul>\n          <ul className=\"PokemonResult__list\">\n            <li className=\"PokemonResult__item\">\n              <span className=\"PokemonResult__statusName\">とくこう</span>\n              <div className=\"PokemonResult__barArea\">\n                <div\n                  className=\"PokemonResult__bar\"\n                  style={{\n                    width: this.map(this.props.spAttack, 0, 255, 0, 100) + \"%\"\n                  }}\n                />\n              </div>\n            </li>\n            <li className=\"PokemonResult__item\">\n              <span className=\"PokemonResult__statusName\">とくぼう</span>\n              <div className=\"PokemonResult__barArea\">\n                <div\n                  className=\"PokemonResult__bar\"\n                  style={{\n                    width: this.map(this.props.spDefense, 0, 255, 0, 100) + \"%\"\n                  }}\n                />\n              </div>\n            </li>\n            <li className=\"PokemonResult__item\">\n              <span className=\"PokemonResult__statusName\">すばやさ</span>\n              <div className=\"PokemonResult__barArea\">\n                <div\n                  className=\"PokemonResult__bar\"\n                  style={{\n                    width: this.map(this.props.speed, 0, 255, 0, 100) + \"%\"\n                  }}\n                />\n              </div>\n            </li>\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport ErrorMessageInterface from \"../interfaces/ErorrMessage.interface\";\nimport \"../scss/ErorrMessage.scss\";\n\nexport default class ErorrMessage extends Component<ErrorMessageInterface> {\n  render() {\n    return (\n      <div>\n        {this.props.notFound && (\n          <div className=\"ErrorMessage\">\n            <p>{this.props.errorMessage}</p>\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport PokemonSearchInterface from \"../interfaces/PokemonSearch.interface\";\nimport PokemonResult from \"./PokemonResult\";\nimport ErorrMessage from \"./ErrorMessage\";\nimport Pokedex from \"../json/pokedex.json\";\nimport Types from \"../json/types.json\";\nimport \"../scss/PokemonSearch.scss\";\n\nexport default class PokemonSearch extends Component<{}, PokemonSearchInterface> {\n  pokemonRef: React.RefObject<HTMLInputElement>;\n  constructor(props: {}) {\n    super(props);\n    this.state = {\n      id: null,\n      nameJp: \"\",\n      nameEn: \"\",\n      attack: null,\n      defense: null,\n      hp: null,\n      spAttack: null,\n      spDefense: null,\n      speed: null,\n      type01: \"\",\n      type02: \"\",\n      flavorText: \"\",\n      imageNumber: \"\",\n      existence: false,\n      error: false,\n      notFound: false,\n      errorMessage: \"ポケモンを みつけることが できませんでした。\"\n    };\n\n    this.pokemonRef = React.createRef();\n  }\n\n  private onPokemonSearchButton = (): void => {\n    const inputValue: string = this.pokemonRef.current.value;\n    let checkPokemonCounter: number = 0;\n\n    for (let i in Pokedex) {\n      if (Pokedex[i].name.japanese === inputValue) {\n        const imageNumber: string = (\"000\" + Pokedex[i].id).slice(-3);\n\n        this.setState({\n          type02: \"\"\n        });\n\n        for (let j in Types) {\n          if (Types[j].english === Pokedex[i].type[0]) {\n            this.setState({\n              type01: Types[j].japanese\n            });\n          }\n\n          if (Types[j].english === Pokedex[i].type[1]) {\n            this.setState({\n              type02: Types[j].japanese\n            });\n          }\n        }\n\n        fetch(`https://pokeapi.co/api/v2/pokemon-species/${Pokedex[i].id}`).then(res => {\n          if (res.status !== 200) {\n            this.setState({\n              error: true,\n              flavorText:\n                Pokedex[i].name.japanese + \"の せつめいは ありません。\"\n            });\n            return;\n          }\n          res.json().then(data => {\n            let flavorText: string = \"\";\n            for (let k in data.flavor_text_entries) {\n              if (data.flavor_text_entries[k].language.name === \"ja-Hrkt\") {\n                flavorText = data.flavor_text_entries[k].flavor_text;\n              }\n            }\n            this.setState({\n              error: false,\n              flavorText: flavorText\n            });\n          });\n        });\n\n        this.setState({\n          id: Pokedex[i].id,\n          nameJp: Pokedex[i].name.japanese,\n          nameEn: Pokedex[i].name.english,\n          attack: Pokedex[i].base.Attack,\n          defense: Pokedex[i].base.Defense,\n          hp: Pokedex[i].base.HP,\n          spAttack: Pokedex[i].base[\"Sp. Attack\"],\n          spDefense: Pokedex[i].base[\"Sp. Defense\"],\n          speed: Pokedex[i].base.Speed,\n          imageNumber: imageNumber,\n          existence: true,\n          notFound: false\n        });\n      } else {\n        checkPokemonCounter++;\n      }\n    }\n    if (checkPokemonCounter === Pokedex.length) {\n      this.setState({\n        notFound: true,\n        existence: false\n      });\n    }\n  };\n\n  private onEnterKey = (e: any): void => {\n    if (e.keyCode === 13) {\n      this.onPokemonSearchButton();\n    }\n  }\n\n  render() {\n    return (\n      <div className={\"PokemonSearch-wrapper\" + (this.state.existence ? \"\" : \" PokemonSearch-wrapper--center\")}>\n        <div className=\"PokemonSearch\">\n          <h1 className=\"PokemonSearch__title\">POKEMON SEARCH</h1>\n          <div className=\"PokemonSearch__area\">\n            <input\n              className=\"PokemonSearch__input\"\n              type=\"text\"\n              ref={this.pokemonRef}\n              onKeyDown={this.onEnterKey}\n              placeholder=\"けんさくしたい ポケモンを にゅうりょくしよう\"\n            />\n            <button\n              className=\"PokemonSearch__button\"\n              onClick={this.onPokemonSearchButton}\n            >\n              けんさく\n            </button>\n          </div>\n          <ErorrMessage\n            notFound={this.state.notFound}\n            errorMessage={this.state.errorMessage}\n          />\n          {this.state.existence && (\n            <PokemonResult\n              nameJp={this.state.nameJp}\n              nameEn={this.state.nameEn}\n              imageNumber={this.state.imageNumber}\n              flavorText={this.state.flavorText}\n              id={this.state.id}\n              type01={this.state.type01}\n              type02={this.state.type02}\n              hp={this.state.hp}\n              attack={this.state.attack}\n              defense={this.state.defense}\n              spAttack={this.state.spAttack}\n              spDefense={this.state.spDefense}\n              speed={this.state.speed}\n            />\n          )}\n        </div>\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './scss/reset.scss';\nimport './scss/base.scss';\nimport PokemonSearch from '../src/components/PokemonSearch';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<PokemonSearch />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}